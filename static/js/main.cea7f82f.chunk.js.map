{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["P","styled","p","Content","div","Button","button","props","primary","BlockButton","Link","className","StyledLink","Input","input","attrs","type","color","Password","girar","keyframes","Rotar","App","as","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAMMA,EAAIC,IAAOC,EAAV,gEAKDC,EAAUF,IAAOG,IAAV,mDAKPC,EAASJ,IAAOK,OAAV,kYAEU,SAAAC,GAAK,OAAIA,EAAMC,QAAU,MAAQ,WAC5C,SAAAD,GAAK,OAAIA,EAAMC,QAAU,QAAU,SAoBxCC,EAAcR,YAAOI,EAAPJ,CAAH,gEAIXS,EAAO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAcJ,EAAY,iBACxC,OAAO,+BAAGI,UAAWA,GAAeJ,KAGhCK,EAAaX,YAAOS,EAAPT,CAAH,2CAIVY,EAAQZ,IAAOa,MAAMC,OAAM,SAAAR,GAAK,MAAK,CACzCS,KAAM,OACNC,MAAOV,EAAMU,OAAS,SAFVhB,CAAH,wFAMA,SAAAM,GAAK,OAAIA,EAAMU,SAGpBC,EAAWjB,YAAOY,GAAOE,MAAM,CACnCC,KAAM,WACNC,MAAO,OAFQhB,CAAH,0EAQRkB,EAAQC,YAAH,sHASLC,EAAQpB,IAAOG,IAAV,2FAEIe,GA2BAG,MApBf,WACE,OACE,eAACnB,EAAD,WACI,cAACH,EAAD,iCACA,eAACK,EAAD,oBAAc,mBAAGM,UAAU,OAAb,qBACd,cAACN,EAAD,qBACA,cAACA,EAAD,CAAQG,SAAO,EAAf,oBACA,cAACH,EAAD,CAAQM,UAAU,YAAlB,oBACA,cAACF,EAAD,CAAaD,SAAO,EAACe,GAAG,IAAIC,KAAK,IAAjC,oBACA,cAACf,EAAD,CAAaD,SAAO,EAApB,oBACA,cAAC,EAAD,mBACA,cAACI,EAAD,8BACA,cAACC,EAAD,CAAOI,MAAM,SACb,cAACC,EAAD,IACA,uBACA,cAACG,EAAD,gCCzFOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cea7f82f.chunk.js","sourcesContent":["import styled, { keyframes } from 'styled-components'\n\n//Styled-Components se crea para hacer mas facil, mas mantenible y mÃ¡s conciso el codigo\n\n//forma de utilizar los backticks en ES6\n// para dar a un elemento su CSS incorporado\nconst P = styled.p` \n  font-size: 24px;\n  color: red;\n`\n\nconst Content = styled.div`\n  padding: 20px 25px;\n`\n//asi se hace el hover y la llamada a clases\n//si no se pone el ampresand se aplica a los hijos del componente \nconst Button = styled.button`\n  transition: box-shadow 0.2s ease;\n  background-color: ${props => props.primary ? 'red' : 'white'};\n  color: ${props => props.primary ? 'white' : 'red'};\n  padding: 10px 15px;\n  border: solid 2px red;\n  border-radius: 4px;\n\n  &:hover {\n    box-shadow: 1px 2px 5px rgb(0, 0, 0, 0.3);\n  }\n\n  &.secondary {\n    background-color: blue;\n    border: solid 2px blue;\n    color: white\n  }\n\n  .info {\n    font-size: 28px;\n  }\n`\n//asi se reutiliza el css del boton anterior\nconst BlockButton = styled(Button)`\n  width: 100%;\n  font-size: 24px;\n`\nconst Link = ({ className, ...props }) => {\n  return <a className={className} {...props}></a>\n}\n\nconst StyledLink = styled(Link)`\n  color:blue;\n`\n\nconst Input = styled.input.attrs(props => ({\n  type: 'text',\n  color: props.color || 'red'\n}))`\n  font-size: 20px;\n  border: 1px solid red;\n  color: ${props => props.color}\n`\n\nconst Password = styled(Input).attrs({\n  type: 'password',\n  color: 'red'\n})`\n  font-size: 20px;\n  border: 1px solid red;\n`\n\nconst girar = keyframes`\n  form {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Rotar = styled.div`\n  display: inline-block;\n  animation: ${girar} 2s linear infinite;\n`\n\n\n//con as=\"a\" hacemos que se comporte como un link\n\n\nfunction App() {\n  return (\n    <Content>\n        <P>Esto es un parrafo</P>\n        <Button>Enviar<p className=\"info\">Info</p></Button>\n        <Button>Enviar</Button>\n        <Button primary>Enviar</Button>\n        <Button className=\"secondary\">Enviar</Button>\n        <BlockButton primary as=\"a\" href=\"#\">Enviar</BlockButton>\n        <BlockButton primary>Enviar</BlockButton>\n        <Link>Link</Link>\n        <StyledLink>Link con estilo</StyledLink>\n        <Input color='blue' />\n        <Password />\n        <br/>\n        <Rotar>Estoy girando</Rotar>\n    </Content>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}